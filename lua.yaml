admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9000

node:
  cluster: service_greeter
  id: test-id

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080      
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: service_httpbin
          http_filters:
          - name: envoy.filters.http.jwt_authn
            typed_config:                                         
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:          
                custom-jwt:
                  issuer: https://myissuer
                  payload_in_metadata: "jwt_payload"
                  audiences:
                  - https://foo.bar
                  local_jwks:
                    filename: certs/jwk.json                   
                  from_headers:
                  - name: Authorization
                    value_prefix: "Bearer "
              rules:
              - match:
                  prefix: "/"
                requires:
                  provider_name: "custom-jwt"
          - name: envoy.filters.http.lua
            typed_config:   
              '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inlineCode: |
               
                function string.fromhex(str)
                    local x = {}
                    for y in str:gmatch('(..)') do
                        x[#x+1] = string.char( tonumber(y, 16) )                     
                    end
                    return table.concat( x )
                end   

                function rtrim(s)
                  local n = #s
                  while n > 0 and s:find("^=", n) do n = n - 1 end
                  return s:sub(1, n)
                end                

                local hex_to_char = function(x)
                  return string.char(tonumber(x, 16))
                end

                local urldecode = function(url)
                  if url == nil then
                    return
                  end
                  url = url:gsub("/", "_")
                  url = url:gsub("+", "-")
                  return url
                end

                local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                function enc(data)
                    return ((data:gsub('.', function(x) 
                        local r,b='',x:byte()
                        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                        return r;
                    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                        if (#x < 6) then return '' end
                        local c=0
                        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                        return b:sub(c+1,c+1)
                    end)..({ '', '==', '=' })[#data%3+1])
                end

                function envoy_on_request(request_handle)
                  local stream = request_handle:streamInfo()
                  local headers = request_handle:headers()  

                  if stream:downstreamSslConnection():peerCertificatePresented() then
                    local peerDigest = stream:downstreamSslConnection():sha256PeerCertificateDigest()
                    local peerSig =urldecode(rtrim(enc(peerDigest:fromhex())))

                    request_handle:logInfo("Peer Signature: "..peerSig)

                    local meta = stream:dynamicMetadata():get("envoy.filters.http.jwt_authn")["jwt_payload"]


                    -- 1. Validate using 
                    local cnf = meta.cnf
                    local jwtSig = cnf["x5t#S256"]
                    if jwtSig == nil then
                        request_handle:respond({[":status"] = "403"},"Token bound claim not provided in JWT")
                    end
                    request_handle:logInfo("JWT Signature: "..jwtSig)

                    if jwtSig ~= peerSig then
                      request_handle:respond({[":status"] = "403"},"Could not verify bound token")
                    end      

                  else 
                    request_handle:respond({[":status"] = "403"},"mTLS Required")
                  end
                end            
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router            
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          require_client_certificate: true
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: certs/http_server.crt
              private_key:
                filename: certs/http_server.key
            validation_context:
              trusted_ca:
                filename: certs/tls-ca-chain.pem
              # verify_certificate_spki:
              # - "iZIV9zjai3erxn/2FfKs/JT4PdLXcFqwAUF9ZZPWElI="
  clusters:
  - name: service_httpbin
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: service_httpbin
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: www.httpbin.org
                port_value: 80
